"""
Name: Network_Vulnerability_Program.py
Author: Wesley Lee
Date: March 22, 2017

Description:
	
	This program gathers both your Public IP Address and your Local Machine's IP Address. 
	It uses your Local Machine's IP Address up to the 3rd octet to scan the subnet you're 
	on within a network you're connected to using NMAP. After gathering the information from 
	the NMAP results, it displays all of the open ports and which IP Address they associate 
	with. The program allows the user to input both the Target IP Address and the Target Port; 
	using Nikto which is a web server vulnerability scanner, scans the targeted host the user entered.
"""

import os
import socket
import sys
import ipgetter

#################################################################################################################

os.system("clear")

# Executes command to get the public IP of the network and stores it in a file
os.system("python -m ipgetter > public_ip.txt")

# Stores the public ip into public_ip
with open('public_ip.txt') as word_list:
	public_ip = word_list.read().split(' ')
print("Your External IP Address is: ", end='')
print(', '.join(public_ip), end='')

# Gets computers IP  address and stores it
machines_ip_addr = socket.gethostbyname(socket.getfqdn())
print("Your Machine's IP Address is: " + machines_ip_addr)

# Adds the IP address to a list
nmap_ip = machines_ip_addr.split(".")

print()

nmap_on_off = input("Enter 'yes' if you want to run a new NMAP scan, or 'no' if you want to use the old NMAP scan: ")

if nmap_on_off == "yes":
	print("Please wait NMAP is running (may take a while)...")
	# Uses computers IP address to nmap the subnet the computer is on
	os.system("nmap -T4 -A -v " + nmap_ip[0] + '.' + nmap_ip[1] + '.' + nmap_ip[2] + '.* > nmap_results.txt' )
	print("----------------------------------------------------------------------------------------------")
	print("New NMAP scan:")
	print()
elif nmap_on_off == "no":
	print("----------------------------------------------------------------------------------------------")
	print("Old NMAP scan:")
	print()

#################################################################################################################

# Takes in IP address and runs nikto to find vulnerabilities
# If 'exit' is enterd, ends the program
def vuln_port_host(vuln_ip, port):
	if vuln_ip == "exit":
		os.system("clear")
		sys.exit()
	else:
		os.system("perl nikto/nikto.pl -h " + vuln_ip + " -p " + port)

# Opens the nmap results
nmap_file = open("nmap_results.txt", "r")

# num_line = the number of lines within the file 'new accounts.txt'
num_of_lines = sum(1 for line in open('nmap_results.txt'))

# Stores the nmap results into port80_open_list
with open('nmap_results.txt') as word_list:
	open_port_list = word_list.read().split('\n')
nmap_file.close()

#################################################################################################################

# Checks the nmap results and stores each open port in their own list
# Port Lists
port_21_IPs = []
port_22_IPs = []
port_23_IPs = []
port_25_IPs = []
port_53_IPs = []
port_80_IPs = []
port_115_IPs = []
port_118_IPs = []
port_443_IPs = []
port_445_IPs = []
port_548_IPs = []
port_8080_IPs = []
for cnt in range(num_of_lines):
	if open_port_list[0][21:24] == "21/":
		port_21_IPs.insert(len(port_21_IPs), open_port_list[0][31:])
	elif open_port_list[0][21:24] == "22/":
		port_22_IPs.insert(len(port_22_IPs), open_port_list[0][31:])
	elif open_port_list[0][21:24] == "23/":
		port_23_IPs.insert(len(port_23_IPs), open_port_list[0][31:])
	elif open_port_list[0][21:24] == "25/":
		port_25_IPs.insert(len(port_25_IPs), open_port_list[0][31:])
	elif open_port_list[0][21:24] == "53/":
		port_53_IPs.insert(len(port_53_IPs), open_port_list[0][31:])
	elif open_port_list[0][21:24] == "80/":
			port_80_IPs.insert(len(port_22_IPs), open_port_list[0][31:])
	elif open_port_list[0][21:25] == "115/":
			port_115_IPs.insert(len(port_115_IPs), open_port_list[0][32:])
	elif open_port_list[0][21:25] == "118/":
			port_118_IPs.insert(len(port_118_IPs), open_port_list[0][32:])
	elif open_port_list[0][21:25] == "443/":
			port_443_IPs.insert(len(port_443_IPs), open_port_list[0][32:])
	elif open_port_list[0][21:25] == "445/":
			port_445_IPs.insert(len(port_445_IPs), open_port_list[0][32:])
	elif open_port_list[0][21:25] == "548/":
			port_548_IPs.insert(len(port_548_IPs), open_port_list[0][32:])
	elif open_port_list[0][21:26] == "8080/":
			port_8080_IPs.insert(len(port_8080_IPs), open_port_list[0][33:])
	del open_port_list[0]	

#################################################################################################################

# All Printing statements 

# Port 21 (FTP)
if len(port_21_IPs) == 0:
	print("These are all of the IPs with port 21 (FTP) open: ", end='')
	print("None")
else:
	print("These are all of the IPs with port 21 (FTP) open: ", end='')
	print(', '.join(port_21_IPs))
	
# Port 22 (SSH)
if len(port_22_IPs) == 0:
	print("These are all of the IPs with port 22 (SSH) open: ", end='')
	print("None")
else:
	print("These are all of the IPs with port 22 (SSH) open: ", end='')
	print(', '.join(port_22_IPs))
	
# Port 23 (Telnet)
if len(port_23_IPs) == 0:
	print("These are all of the IPs with port 23 (Telnet) open: ", end='')
	print("None")
else:
	print("These are all of the IPs with port 23 (Telnet) open: ", end='')
	print(', '.join(port_23_IPs))
	
# Port 25 (SSH)
if len(port_25_IPs) == 0:
	print("These are all of the IPs with port 25 (SMTP) open: ", end='')
	print("None")
else:
	print("These are all of the IPs with port 25 (SMTP) open: ", end='')
	print(', '.join(port_25_IPs))

# Port 53 (DNS)
if len(port_53_IPs) == 0:
	print("These are all of the IPs with port 53 (DNS) open: ", end='')
	print("None")
else:
	print("These are all of the IPs with port 53 (DNS) open: ", end='')
	print(', '.join(port_53_IPs))

# Port 80 (HTTP)
if len(port_80_IPs) == 0:
	print("These are all of the IPs with port 80 (HTTP) open: ", end='')
	print("None")
else:
	print("These are all of the IPs with port 80 (HTTP) open: ", end='')
	print(', '.join(port_80_IPs))
	
# Port 115 (SFTP)
if len(port_115_IPs) == 0:
	print("These are all of the IPs with port 115 (SFTP) open: ", end='')
	print("None")
else:
	print("These are all of the IPs with port 115 (SFTP) open: ", end='')
	print(', '.join(port_115_IPs))
	
# Port 118 (SQL)
if len(port_118_IPs) == 0:
	print("These are all of the IPs with port 118 (SQL) open: ", end='')
	print("None")
else:
	print("These are all of the IPs with port 118 (SQL) open: ", end='')
	print(', '.join(port_118_IPs))

# Port 443 (HTTPS)
if len(port_443_IPs) == 0:
	print("These are all of the IPs with port 443 (HTTPS) open: ", end='')
	print("None")
else:
	print("These are all of the IPs with port 443 (HTTPS) open: ", end='')
	print(', '.join(port_443_IPs))

# Port 445 (Active Directory/SMB)
if len(port_445_IPs) == 0:
	print("These are all of the IPs with port 445 (Active Directory/SMB) open: ", end='')
	print("None")
else:	
	print("These are all of the IPs with port 445 (Active Directory/SMB) open: ", end='')
	print(', '.join(port_445_IPs))
	
# Port 548 (Apple File Service)
if len(port_445_IPs) == 0:
	print("These are all of the IPs with port 548 (Apple File Service) open: ", end='')
	print("None")
else:	
	print("These are all of the IPs with port 548 (Apple File Service) open: ", end='')
	print(', '.join(port_548_IPs))
	
# Port 8080 (Alternative HTTP Port)
if len(port_8080_IPs) == 0:
	print("These are all of the IPs with port 8080 (Alternative HTTP Port) open: ", end='')
	print("None")
else:
	print("These are all of the IPs with port 8080 (Alternative HTTP Port) open: ", end='')
	print(', '.join(port_8080_IPs))
	
print("----------------------------------------------------------------------------------------------")
for cnt in range(sys.maxsize):
	print()
	vuln_ip = input("Enter the IP address or URL to test (enter 'exit' if done): ")
	if vuln_ip == 'exit':
		print()
		print("Full NMAP results are in the main folder named 'nmap_results.txt'")
		sys.exit()
	port = input("Enter the port number (enter 'exit' if done): ")
	print()
	if port == 'exit':
		print("Full NMAP results are in the main folder named 'nmap_results.txt'")
		sys.exit()
	else:
		vuln_port_host(vuln_ip, port)
	